Index: app/utils_new.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/utils_new.py	(revision )
+++ app/utils_new.py	(revision )
@@ -0,0 +1,93 @@
+# -*- coding: utf-8 -*-
+from functools import lru_cache, wraps
+
+import pymysql
+
+
+def retry(count=5, exc_type=Exception):
+    def decorator(func):
+        @wraps(func)
+        def result(*args, **kwargs):
+            for _ in range(count):
+                try:
+                    return func(*args, **kwargs)
+                except exc_type:
+                    pass
+                raise Exception
+
+        return result
+
+    return decorator
+
+
+def get_db_connection():
+    """
+
+    :return:
+    """
+    print("get_db_connection")
+    from app.views import DB_HOST, DB_USER, DB_PWD, DB_NAME
+
+    # @lru_cache()
+    # def connection(DB_HOST, DB_USER, DB_PWD, DB_NAME):
+    return pymysql.connect(host=DB_HOST,
+                               user=DB_USER,
+                               password=DB_PWD,
+                               db=DB_NAME,
+                               charset='utf8mb4',
+                               cursorclass=pymysql.cursors.DictCursor)
+
+    # return connection(DB_HOST, DB_USER, DB_PWD, DB_NAME)
+
+
+def insert_into_ltp_table(inv_time, data_dict):
+    """Inserts the Date into the LTP Table
+
+    :param time:
+    :param data_dict:
+    :return:
+    """
+    # Structure of the dict
+    # {
+    #     "tradeable": False,
+    #     "mode": self.MODE_LTP,
+    #     "instrument_token": instrument_token,
+    #     "last_price": self._unpack_int(packet, 4, 8) / divisor
+    # }
+
+    connection = get_db_connection()
+    try:
+        print(connection)
+        with connection.cursor() as cursor:
+            # Create a new record
+            sql = "INSERT INTO zerodhastreamquotes_modeltp (InstrumentToken, Tradeable, Timestamp, LastTradedPrice, Mode) VALUES (%s, %s, %s, %s,%s)"
+            cursor.execute(sql, (
+            data_dict.get('instrument_token'), data_dict.get('tradeable'), inv_time, data_dict.get('last_price'),
+            data_dict.get('mode')))
+        # connection is not autocommit by default. So we do an explicit commit here
+        connection.commit()
+        print("Inserted %s into LTP Table" % data_dict)
+    except Exception as connexc:
+        print("Connection Error %s" % str(connexc) )
+    finally:
+        connection.close()
+
+
+def fetch_ltp_results():
+    """
+
+    :return:
+    """
+    connection = get_db_connection()
+    try:
+        with connection.cursor() as cursor:
+            # Read a single record
+            sql = "SELECT * from zerodhastreamquotes_modeltp"
+            cursor.execute(sql)
+            return cursor.fetchall()
+    finally:
+        connection.close()
+
+
+if __name__ == '__main__':
+    print(get_db_connection())
\ No newline at end of file
Index: app/zerodha_new.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/zerodha_new.py	(revision )
+++ app/zerodha_new.py	(revision )
@@ -0,0 +1,123 @@
+# -*- coding: utf-8 -*-
+import logging
+from threading import Thread
+from queue import Queue
+
+from app.client import GMTechWebSocket
+from app.utils import retry
+from kiteconnect import KiteConnect
+
+# Dummy Keys
+from websocket import WebSocketException
+
+api_key = "abcd51hdgns"  # API KEY
+user_id = "DR1234"  # USER ID
+public_token = "asljfldlncnl093nnnzc4"  # PUBLIC TOKEN
+
+API_KEY = ''
+kite = KiteConnect(api_key=API_KEY)
+
+o_instr = [738561, 5633]
+instruments = [53397255, 53426439, 53427463, 53426951, 53329415, 53405959]
+
+logging.basicConfig(
+    filename='logs.log',
+    level=logging.DEBUG,
+    format='(%(threadName)-10s) %(message)s',
+)
+logging.getLogger('websocket').setLevel(logging.DEBUG)
+
+LOG = logging.getLogger(__name__)
+
+
+class ZerodhaWorker(Thread):
+    """"
+    """
+    __queue = Queue()
+    __client_socket = None
+    __run_status = False
+
+    def __init__(self, q):
+        """
+
+        :param group:
+        :param target:
+        :param name:
+        :param args:
+        :param kwargs:
+        :param daemon:
+        """
+        Thread.__init__(self)
+        self.__queue = q
+
+        if not self.__client_socket:
+            self.__run_status = self.__initiate_socket()
+            LOG.debug(self.__run_status)
+            print("Info: ZerodhaWorker Status - %s" % str(self.__run_status))
+
+    def run(self):
+
+        def on_error(erorr, ws):
+            """
+
+            :param erorr:
+            :param ws:
+            :return:
+            """
+            LOG.error("WS - %s" % ws._gm_name)
+            print("WS Error- %s" % ws._gm_name)
+            self.__client_socket.reconnect()
+        # Callback for tick reception.
+        def on_tick(tick, ws):
+            print(tick)
+
+        # Callback for successful connection.
+        def on_connect(ws):
+            print("On Connect %s" % ws._gm_name)
+            _instruments = ZerodhaWorker.__queue.get()
+            # Subscribe to a list of instrument_tokens (RELIANCE and ACC here).
+            ws.subscribe(_instruments)
+            print("On Connect %s Subscribed to %s" % (ws._gm_name, ','.join(_instruments)))
+            # Set RELIANCE to tick in `full` mode.
+            ws.set_mode(ws.MODE_LTP, _instruments)
+
+        # Assign the callbacks.
+        self.__client_socket.on_tick = on_tick
+        self.__client_socket.on_error = on_error
+        self.__client_socket.on_connect = on_connect
+        while True:
+            self.__client_socket.connect()
+
+    def close(self):
+        """
+
+        :return:
+        """
+        print("On Close %s" % ws._gm_name)
+        self.__client_socket.close()
+
+    @retry(count=10, exc_type=WebSocketException)
+    def __initiate_socket(self):
+        """
+
+        :return:
+        """
+        # Initialise.
+        status = False
+        try:
+            self.__client_socket = GMTechWebSocket(api_key, public_token, user_id)
+            print("Info: start_connection Successful- %s" % str(self.__client_socket._gm_name))
+            status = True
+        except WebSocketException as e:
+            LOG.error("start_connection - %s" % str(e))
+            print("Error: start_connection - %s" % str(e))
+            raise e
+
+        return status
+
+
+# q = Queue().put(instruments)
+# zc = ZerodhaWorker(q)
+# zc.setName("zc")
+# zc.setDaemon(True)
+# zc.start()
\ No newline at end of file
Index: app/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/utils.py	(revision )
+++ app/utils.py	(revision )
@@ -27,16 +27,16 @@
     """
     from app.views import DB_HOST, DB_USER, DB_PWD, DB_NAME
 
-    @lru_cache()
-    def connection(DB_HOST, DB_USER, DB_PWD, DB_NAME):
+    # @lru_cache()
+    # def connection(DB_HOST, DB_USER, DB_PWD, DB_NAME):
-        return pymysql.connect(host=DB_HOST,
+    return pymysql.connect(host=DB_HOST,
                                user=DB_USER,
                                password=DB_PWD,
                                db=DB_NAME,
                                charset='utf8mb4',
                                cursorclass=pymysql.cursors.DictCursor)
 
-    return connection(DB_HOST, DB_USER, DB_PWD, DB_NAME)
+    # return connection(DB_HOST, DB_USER, DB_PWD, DB_NAME)
 
 
 def insert_into_ltp_table(inv_time, data_dict):
@@ -53,8 +53,10 @@
     #     "instrument_token": instrument_token,
     #     "last_price": self._unpack_int(packet, 4, 8) / divisor
     # }
+
     connection = get_db_connection()
     try:
+        print(connection)
         with connection.cursor() as cursor:
             # Create a new record
             sql = "INSERT INTO zerodhastreamquotes_modeltp (InstrumentToken, Tradeable, Timestamp, LastTradedPrice, Mode) VALUES (%s, %s, %s, %s,%s)"
@@ -63,6 +65,9 @@
             data_dict.get('mode')))
         # connection is not autocommit by default. So we do an explicit commit here
         connection.commit()
+        print("Inserted %s into LTP Table" % data_dict)
+    except Exception as connexc:
+        print("Connection Error %s" % str(connexc) )
     finally:
         connection.close()
 
@@ -81,3 +86,7 @@
             return cursor.fetchall()
     finally:
         connection.close()
+
+
+if __name__ == '__main__':
+    print(insert_into_ltp_table('11111', {}))
\ No newline at end of file
Index: app/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/views.py	(revision )
+++ app/views.py	(revision )
@@ -1,5 +1,8 @@
 # -*- coding: utf-8 -*-
+from queue import Queue
+
 from app.utils import fetch_ltp_results
+from app.zerodha import ZerodhaWorker
 from flask import Flask, render_template
 
 DB_HOST = 'localhost'
@@ -15,6 +18,8 @@
 truthy = frozenset(('t', 'true', 'y', 'yes', 'on', '1'))
 
 
+q = Queue(maxsize=200)
+
 def asbool(s):
     """ Return the boolean value ``True`` if the case-lowered value of string
     input ``s`` is any of ``t``, ``true``, ``y``, ``on``, or ``1``, otherwise
@@ -39,8 +44,20 @@
 
 
 @app.route('/add/<instrument_token>')
-def add_instrument():
-    pass
+def add_instrument(instrument_token):
+    """
+
+    :return:
+    """
+    if instrument_token:
+        q.put(instrument_token.split(','))
+        zc = ZerodhaWorker(q)
+        zc.setName("zc")
+        zc.setDaemon(True)
+        zc.start()
+        return "Added the following instruments - %s . <br><a href='/fetch'>View Results</a>" % ','.join(instrument_token)
+
+    return "Invalid"
 
 
 @app.route('/fetch')
Index: app/client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/client.py	(revision )
+++ app/client.py	(revision )
@@ -21,13 +21,14 @@
         :param root:
         """
         self.__call_time = dt.datetime.now()
+        self._gm_name = self.__call_time
         WebSocket.__init__(self, api_key, public_token, user_id, root)
 
     def _parse_binary(self, bin):
         """Parse binary data to a (list of) ticks structure."""
         packets = self._split_packets(bin)  # split data to individual ticks packet
         data = []
-
+        print("_parse_binary ")
         for packet in packets:
             instrument_token = self._unpack_int(packet, 0, 4)
             segment = instrument_token & 0xff  # Retrive segment constant from instrument_token
@@ -127,8 +128,9 @@
         :return:
         """
         if mode == self.MODE_LTP:
-            db_thread = threading.Thread(target=insert_into_ltp_table, args=(self.__call_time, data,))
-            db_thread.daemon = True
+            print("Received Tick %s - %s" % (mode, data))
+            db_thread = threading.Thread(name='insert_into_ltp_table_thread', target=insert_into_ltp_table, args=(self.__call_time, data,))
+            db_thread.daemon = False
             db_thread.start()
         else:
             pass
\ No newline at end of file
